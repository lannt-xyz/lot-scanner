import os
import uuid
import json

from typing import Tuple

from fastapi import File, UploadFile

from app.logs import logger
from app.error.bad_request_exception import BadRequestException
from app.models.orc_result_model import OcrResultModel
from app.modules.ocr.image_to_text import convert_image_to_text
from app.modules.gemini.gemini_api import generate_gemini_response
from app.modules.services.file_service import FileService
from app.utils.template_loader import template_env 

class ImageService:
    def image_to_lot_info(self, device_id: str, image: UploadFile = File(...)) -> Tuple[str, str, OcrResultModel, str]:
        try:
            # Generate uuid for this time process
            unique_id = uuid.uuid4()
            temp_dir = os.path.join('temp', str(unique_id))

            # Save the uploaded file to a temporary directory
            temp_file_path = FileService.save_file(image, temp_dir)
            # Call your OCR function here
            ocr_text = convert_image_to_text(temp_file_path)
            # Create a prompt for the Gemini model by loading the Jinja2 template
            template = template_env.get_template('ticket_prompt.j2')
            prompt = template.render(ocr_text=ocr_text)  # Render the template to a string
            # Call the Gemini API with the generated by prompt
            result = generate_gemini_response(prompt)
            if not result or result == 'not_found':
                raise BadRequestException('Gemini API returned an empty response')
            # Parse the result as JSON
            corrected_text = result.replace("```json", '').replace("```", "")
            json_dict = json.loads(corrected_text)
            ocr_result = OcrResultModel(**json_dict)

            # Save uploaded image to storage
            upload_dir = os.path.join('uploaded_photos', str(device_id), str(unique_id))
            upload_file = FileService.save_file(image, upload_dir)

            return upload_file, ocr_text, ocr_result, corrected_text
        except Exception as e:
            logger.error(f"Error processing image: {str(e)}")
            raise BadRequestException('Error processing the image: {}'.format(str(e)))
        finally:
            # Clean up the temporary directory
            FileService.delete_dir(temp_dir)
            