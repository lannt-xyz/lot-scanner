from fastapi import File, UploadFile
import json

from app.logs import logger
from app.error.bad_request_exception import BadRequestException
from app.modules.ocr.image_to_text import convert_image_to_text
from app.modules.text_extract.gemini_api import generate_gemini_response
from app.services.file_service import FileService
from app.utils.template_loader import template_env 

class ImageService:
    def image_to_lot_info(self, image: UploadFile = File(...)) -> str:
        try:
            # Save the uploaded file to a temporary directory
            temp_file_path = FileService.save_temp_file(image)
            # Call your OCR function here
            ocr_text = convert_image_to_text(temp_file_path)
            # Create a prompt for the Gemini model by loading the Jinja2 template
            template = template_env.get_template('ticket_prompt.j2')
            prompt = template.render(ocr_text=ocr_text)  # Render the template to a string
            # Call the Gemini API with the generated by prompt
            result = generate_gemini_response(prompt)
            if not result or result == 'not_found':
                raise BadRequestException('Gemini API returned an empty response')
            # Parse the result as JSON
            result = result.replace("```json", '').replace("```", "")
            return json.loads(result)
        except Exception as e:
            logger.error(f"Error processing image: {str(e)}")
            raise BadRequestException('Error processing the image: {}'.format(str(e)))
        finally:
            # Clean up the temporary file
            FileService.delete_temp_file(temp_file_path)